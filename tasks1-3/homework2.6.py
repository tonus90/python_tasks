# 6. * Реализовать структуру данных «Товары». Она должна представлять собой список кортежей. Каждый кортеж хранит информацию об отдельном товаре. В кортеже должно быть два элемента — номер товара и словарь с параметрами (характеристиками товара: название, цена, количество, единица измерения). Структуру нужно сформировать программно, т.е. запрашивать все данные у пользователя.
# Пример готовой структуры:
# [
# (1, {“название”: “компьютер”, “цена”: 20000, “количество”: 5, “eд”: “шт.”}),
# (2, {“название”: “принтер”, “цена”: 6000, “количество”: 2, “eд”: “шт.”}),
# (3, {“название”: “сканер”, “цена”: 2000, “количество”: 7, “eд”: “шт.”})
# ]
# Необходимо собрать аналитику о товарах. Реализовать словарь, в котором каждый ключ — характеристика товара, например название, а значение — список значений-характеристик, например список названий товаров.
# Пример:
# {
# “название”: [“компьютер”, “принтер”, “сканер”],
# “цена”: [20000, 6000, 2000],
# “количество”: [5, 2, 7],
# “ед”: [“шт.”]
# }

import copy as c #импорт библиотеки копирования

data_base=[] #пустой список для нашей БД
data_prod={} #пустой словарь - буфер для записи в него значений ключей: название, цена, кол-во, ед
dicts=[] #архив словарей из буфера data_prod
info={                  #словарь с необходимыми для воода параметрами
        1:'Название',
        2:'Цена',
        3:'Количество',
        4:'Ед.'
}

#в данной задаче: компьютер, принтер, сканер
rows=int(input('Введите количество наименований товаров, которые будут внесены в БД: '))

#цикл пробегается по каждому типу товаров, например стоит задача вбить первый тип товара - компьютер,
#пошел первый элемент внешнего цикла for
for n in range(rows):
        for i in range(1, len(info)+1, 1): #вложеный цикл пробегается по каждому параметру товара: название, кол-во, цена, ед
                data_prod[info[i]]=input(f'Введите параметр {info[i]}: ') #тут заполняем буфер, данными по первому типо товара компьютер, вбиваем сами параметры название цена и тд
        dicts.insert(n,data_prod.copy()) #добавим из буфера в архив словарей полученный словарик с данными первого типа товаров
        prod=(n+1, dicts[n]) #из ахива словарей добавляем n-й словарь по внешнему циклу в кортеж (номер, словарь)
data_base.append(prod) #данный кортеж засовываем в список кортежей data_base
#зачем нужен буфер и архив словарей - а затем,
# что в логике данной программы ключи (название, кол-во, цена, ед.) одни и теже, а значения всегда добавляются
# новые, поэтому значения словаря просто перезаписываются, из за этого копию каждого словарика мы кладем в архив
# и потом вытаскиваем все уже из этого архива и работаем с ним.

print(data_base) #печатаем базу данных

analyst={} #словарь для аналитики по заданию
values=[] #значения ключей словаря аналитики (туда будем класть: типы товаров, количества, цены, единицы.)

for n in range(1, len(info)+1, 1): #внешний цикл, проходимся по всем параметрам
        for i in range(len(dicts)): #проходимся по архиву словарей
                a=dicts[i] #тут не знаю, чисто присвоил архив словарей в переменную, чтобы ниже вызывать элементы архива по индексу
                values.append(a[info[n]]) #вызываю по индексу значения словарика первого допустим и добавляю их в список значений
        analyst[info[n]]=c.deepcopy(values) #копию списка значений запихиваю в словарь аналитики и ключем по параметру: название, кол-во, цена и тд.
        values.clear() #очищаю список значений, чтобы он пополнялся значениями только конкретно одного типа товара, при каждой итерации цикла

print(analyst) #печатаю необходимую аналитику