# 1. Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса (метод __init__()), который должен
# принимать данные (список списков) для формирования матрицы.
# Подсказка: матрица — система некоторых математических величин, расположенных в виде прямоугольной схемы.
# Примеры матриц вы найдете в методичке.
# Следующий шаг — реализовать перегрузку метода __str__() для вывода матрицы в привычном виде.
# Далее реализовать перегрузку метода __add__() для реализации операции сложения двух объектов класса Matrix (двух матриц).
#
# Результатом сложения должна быть новая матрица.
# Подсказка: сложение элементов матриц выполнять поэлементно — первый элемент первой строки первой матрицы складываем с
# первым элементом первой строки второй матрицы и т.д.

class Matrix:
    def __init__(self, matrix):
        self.matrix = matrix

    def str_return(self): #метода для красивого вывода матрицы на принте
        list_data = [] #нужен будет лист
        for i in self.matrix: #вытаскиваем поэлементно строки матрицы, каждое число матрицы в int
            new_list = [str(el) for el in i] #стрингуем каждое число вытащенной строки матрицы и засовываем в лист
            res1 = ' '.join(new_list) #из стринговых чисел листа делаем строку с числами (Пр.1 2 3)
            list_data.append(res1) # кладем готовую строку в list_data
        res2 = '\n'.join(list_data) #джоиним каждую строку из лист дата через  \n для красивого отображения матрицы
        return res2 #возвращаем из метода

    def __str__(self):
        return self.str_return() #чтобы не вызывать явно метод str_return вызываем через print

    def __add__(self, other):
        result = []
        num = []
        for i in range(len(self.matrix)):
            for j in range(len(self.matrix[0])):
                summ = self.matrix[i][j] + other.matrix[i][j] #вобщем тут получим цифру сложения перого объекта и второго
                num.append(summ) #добавим это в массив чисел
                if len(num) == len(self.matrix): #когда в массиве чисел будет столько же эл. сколько и в строке матрицы
                    result.append(num) #добавляем в результ. список наш список чисел
                    num = [] #обнуляем массив чисел
        self.matrix = result #когда все циклы пройдут это у нас будет многомерный массив
        return Matrix(self.matrix) #который мы засунем в класс


m1 = [[1,2,3],[4,5,6],[7,8,9]]
m2 = [[4,5,6],[3,3,3],[4,4,4]]
m3 = [[7,8,9],[5,5,5],[6,6,6]]

mat1 = Matrix(m1)
mat2 = Matrix(m2)
mat3 = Matrix(m3)

print(mat1+mat2+mat3+mat2+mat2+mat1) #все считает на ура, очень крутое задание, спасибо, было не на изи. Самое
#сложное из 3х

# list_data = []
# for j in range(0, len(matrix)):
#     for i in matrix:
#         new_list = [str(i) for i in i]
#         res1 = ' '.join(new_list)
#         list_data.append(res1)
#     print(list_data[j])
